import java_cup.runtime.*;

%%
%class Lexer
%unicode
%cup
%line
%column

/* tell JFlex to insert two private classes into class Lexer
which will ease building the symbol table */

%{
StringBuffer string = new StringBuffer();
private Symbol symbol(int type) {
return new Symbol(type, yyline, yycolumn);
}
private Symbol symbol(int type, Object value) {
return new Symbol(type, yyline, yycolumn, value);
}
%}

LineTerminator = \r|\n|\r\n
InputCharacter = [^\r\n]
WhiteSpace = {LineTerminator} | [ \t\f]

Comment = {EOLComment} | {MultiLineComment}

EOLComment = "//" {InputCharacter}* {LineTerminator}?
MultiLineComment = "/*" [^*] ~"*/" | "/*" "*"+ "/"
Identifier = [:jletter:][:jletterdigit:]*
DecIntegerLiteral = 0 | -?[1-9][0-9]{0,10}

%state STRING
%%

/* <YYINITIAL> defines a lexical rule. <YYINITIAL>{block} describes a set of
lexical rules.  Eazy-Squeazy.*/

/* CSTR keywords */
<YYINITIAL> "int"  { return symbol(sym.CONST-EXT); }
<YYINITIAL> "extern" {return symbol(sym.EXTERN)}
<YYINITIAL> "do" {return symbol(sym.DO)}
<YYINITIAL> "while" {return symbol(sym.WHILE)}
<YYINITIAL> "for" {return symbol(sym.FOR)}
<YYINITIAL> "if" {return symbol(sym.IF)}
<YYINITIAL> "else" {return symbol(sym.ELSE)}
<YYINITIAL> "return" {return symbol(sym.RETURN)}

<YYINITIAL> {
      /* identifiers */

      {Identifier} { return symbol(sym.IDENTIFIER); }
        /* literals */
      {DecIntegerLiteral} { return symbol(sym.INTEGER_LITERAL); }
\" { string.setLength(0); yybegin(STRING); }

/* operators */

      "="  { return symbol(sym.EQ); }
      "==" { return symbol(sym.EQEQ); }
      "+"  { return symbol(sym.PLUS); }
      "-"  { return symbol(sym.MINUS);}
      "%"  { return symbol(sym.MODULO);}
      "/"  { return symbol(sym.FLOOR);}
      "*"  { return symbol(sym.MULTIPLY);}
      ">=" { return symbol(sym.GREATEQ)}
      "<=" { return symbol(sym.LESSEQ)}
      "<"  { return symbol(sym.LESSTHAN)}
      ">"  { return symbol(sym.GREATERTHAN)}
      "!=" { return symbol(sym.NOTEQ)}

      {Comment} { /* ignore */ }
      {WhiteSpace} { /* ignore */ }
}

<STRING> {

      \" { yybegin(YYINITIAL);
      return symbol(sym.STRING_LITERAL, string.toString()); }
      [^\n\r\"\\]+ { string.append( yytext() ); }
      \\t { string.append(’\t’); }
      \\n { string.append(’\n’); }
      \\r { string.append(’\r’); }
      \\ { string.append(’\\’); }

}
